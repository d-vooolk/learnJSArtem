/*
Массивы

Что такое массив
Массив - это упорядоченная коллекция элементов, которая может содержать любые типы данных: числа, строки, объекты, другие массивы и т.д.
В JavaScript массивы являются динамическими, то есть их размер может изменяться в процессе выполнения программы.
*/



/*
Создание массива
Массив можно создать с помощью литерала массива [] или с помощью конструктора Array()
*/

let myArray1 = [1,2,3,4,5];
let myArray2 = new Array();


/*
Доступ к элементам массива:
Каждый элемент массива имеет свой индекс, начиная с нуля.
Доступ к элементу массива осуществляется с помощью оператора [] и указания индекса элемента
*/

let array = [1,2,3];
console.log(array[2]);  //  Выведет число 3


/*
Добавление и удаление элементов
Для добавления элемента в конец массива используется метод push().
Для добавления элемента в начало массива используется метод unshift().

Для удаления последнего элемента массива используется метод pop().
Для удаления первого элемента массива используется метод shift().
*/

let arrayForMethods = [1,2,3,4,5,6,7,8];

arrayForMethods.push(2);
arrayForMethods.unshift(5);
arrayForMethods.pop();
arrayForMethods.shift();



/*
Длина массива
Для получения количества элементов в массиве можно использовать свойство length
*/

arrayForMethods.length;



/*
Итерация по массиву
Для выполнения операций над каждым элементом массива можно использовать цикл for или метод forEach().
*/

for (let i = 0; i < arrayForMethods.length; i++) {
    console.log(arrayForMethods[i]);
}

arrayForMethods.forEach((item) => {
    console.log(item);
});



/*
Методы работы с массивами
В JavaScript существует множество методов для работы с массивами, таких как splice(), slice(), concat(), indexOf(), reverse() и многие другие
Эти методы позволяют добавлять, удалять, изменять элементы массива, а также выполнять различные операции с ними.
*/

let newArr = [1, 2, 3];

arrayForMethods.splice(1,0,4); // Добавление элемента 4 на позицию 1
console.log(newArr);  // Выведет [ 1, 4, 2, 3 ]



let sliceArray = newArr.slice(1, 3);
console.log(sliceArray); // Выводит [ 4, 2 ]


let newArray = newArr.concat([5, 6]);
console.log(newArray);  // Выводит [ 1, 4, 2, 3, 5, 6 ]

// Объединять массивы можно также при помощи spread операторов
let newArray1 = [...newArr, [5, 6]];
console.log(newArray1);  // Выводит [ 1, 4, 2, 3, 5, 6 ]




/*
Метод indexOf()
indexOf() возвращает индекс первого вхождения указанного элемента в массиве.

    Синтаксис: array.indexOf(searchElement, fromIndex)

searchElement - элемент, который нужно найти в массиве.
fromIndex (необязательный) - индекс, с которого начать поиск элемента (по умолчанию 0).
*/

let indexArray = [1,2,3,4,5];

let index = indexArray.indexOf(3);
console.log(index); // Выводит 2




/*
Метод reverse()
reverse() меняет порядок элементов в массиве на обратный.
*/

let oneMoreArray = [1,2,3,4,5];
oneMoreArray.reverse();
console.log(oneMoreArray); // Выводит [5,4,3,2,1]



/*
Метод sort()
Этот метод сортирует массив по зависимости которую получает в виде аргумента-функции
*/

const unsortArr = [1, 18, 25, 3, 1323, 17];
const sortArray = unsortArr.sort((a, b) => a > b ? 1 : -1);

/*
В этом случае массив сортируется по-возрастанию, функция которую мы прокидываем как аргумент метода sort, принимает
два параметра, это будут элементы массива по порядку (первый второй, потом второй третий, потом третий четвёртый и тд)

Эту функцию сортировки можно описать короче
*/

const shortSortArray = unsortArr.sort((a, b) => a - b);

/*
Это всё та же функция сортировки по-возрастанию, но короче.
*/
