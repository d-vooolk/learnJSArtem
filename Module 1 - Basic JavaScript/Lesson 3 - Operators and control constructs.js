/*
Операторы и управляющие конструкции в JavaScript
*/


/*
Операторы - это инструменты, которые используются для выполнения различных операций над значениями в
программировании. Они позволяют выполнять математические операции (например, сложение, вычитание)
сравнивать значения (например, проверять равенство или больше/меньше) и производить другие манипуляции с
данными. Например, оператор "+" используется для сложения двух чисел, а оператор "==" используется для проверки
равенства двух значений
*/


/*
Управляющие конструкции, с другой стороны, позволяют управлять потоком выполнения программы. Они позволяют определить
какие действия должны быть выполнены в зависимости от определенных условий или в каком порядке выполнять определенные
части кода. Некоторые из наиболее распространенных управляющих конструкций включают условные операторы
(например, "if-else" ветвление), циклы (например, "for" или "while" циклы) и операторы перехода
(например, "break" или "continue"), которые влияют на выполнение циклов.
*/


/*
Арифметические операторы
Арифметические операторы используются для выполнения математических операций
*/

let x = 5;
let y = 2;

console.log(x + y);
console.log(x - y);
console.log(x * y);
console.log(x / y);
console.log(x % y);
console.log(x ** y);


/*
Инкремент и декремент

Инкремент - это операция увеличения значения переменной на 1. Когда мы используем оператор инкремента
(обычно записывается как "++"), значение переменной увеличивается на 1. Например, если у нас есть переменная x со
значением 5, то инкрементирование x++ увеличит значение x на 1, и теперь x будет равно 6. Это удобно, когда нам нужно
увеличить счетчик или перейти к следующему элементу при переборе.

Декремент - это операция уменьшения значения переменной на 1. Когда мы используем оператор декремента
(обычно записывается как "--"), значение переменной уменьшается на 1. Например, если у нас есть переменная y
со значением 8, то декрементирование y-- уменьшит значение y на 1, и теперь y будет равно 7. Это может
быть полезно, когда мы хотим уменьшить счетчик или перейти к предыдущему элементу при переборе.

Префиксный инкремент и декремент:
При использовании префиксного инкремента (например, "++x"), значение переменной увеличивается на 1 перед
тем, как оно будет использовано в других выражениях или операциях. Например, если у нас есть переменная x
со значением 5, префиксный инкремент ++x увеличит значение x на 1 сразу же, и теперь x будет равно 6.
После инкрементации новое значение x будет использоваться в остальной части кода.
*/


/*
Операторы сравнения
Операторы сравнения используются для сравнения значений и возвращают логическое значение true или false.
*/

let a = 5;
let b = 3;

console.log(a > b); // true
console.log(a < b); // false
console.log(a >= b);  //true
console.log(a <= b);  // false
console.log(a === b);  // false
console.log(a !== b);  // true


/*
Строгое и нестрогое сравнение
*/

/*
Строгое сравнение в JavaScript (также известное как "строгое равенство") сравнивает значения двух операндов и
проверяет, равны ли они и по типу данных, и по значению. Если значения операндов одинаковы и имеют одинаковый
тип данных, то результатом строгого сравнения будет true (истина), иначе - false (ложь). Для строгого сравнения
используется оператор ===
*/
console.log(5 === 5); // true
console.log(5 === "5"); // false
console.log(true === true); // true


/*
Нестрогое сравнение в JavaScript (также известное как "нестрогое равенство") сравнивает значения двух операндов,
преобразуя их к одному типу данных (если они разные) и затем сравнивает их значения. Нестрогое сравнение не
учитывает тип данных, поэтому значения могут быть равны, даже если они имеют разные типы. Для нестрогого сравнения
используется оператор ==.
*/
console.log(5 === 5); // true
console.log(5 === "5"); // true
console.log(true == 1); // true


/*
Логические операторы
Логические операторы используются для объединения и инверсии логических значений.
*/
let x1 = true;
let y1 = false;

console.log(x1 && y1); // false
console.log(x1 || y1); // true
console.log(!x1); // false


/*
Условные операторы
Условные операторы позволяют выполнять определенный блок кода в зависимости от условия.
*/
let age = 18;

if (age >= 18) {
    console.log("Вы совершеннолетний")
} else {
    console.log("Вы несовершеннолетний")
}

let day = "субботв";

if (day === "субботв" || day === "воскресенье") {
    console.log("выходной")
} else {
    console.log("будний")
}


/*
Тернарные операторы

Тернарные операторы это сокращённая версия условных операторов.
Конструкция выглядит так:
условие ? если верно то выполнить это : если неверно, выполнить это.
*/
const a1 = 45;
const b1 = 38;

a > b ? console.log("a > b") : console.log("a < b");


/*
Циклы
Циклы позволяют выполнять определенный блок кода несколько раз.
*/


/*
Цикл while выполняет блок кода, пока указанное условие истинно. Сначала проверяется условие, и если оно верно,
то выполняется код внутри цикла. Затем снова проверяется условие, и если оно по-прежнему верно, цикл повторяется.
Цикл продолжает выполняться до тех пор, пока условие остается истинным. Если условие с самого начала является ложным,
код внутри цикла не будет выполнен ни разу

В приведенном примере цикл while будет выполняться, пока переменная i меньше 5. На каждой итерации цикла
значение переменной i выводится в консоль, а затем увеличивается на 1.
*/

let i = 0;
while (i < 5) {
    console.log(i);
    i++;
}


/*
Цикл for также используется для повторения выполнения блока кода, но он предоставляет более компактную и удобную
форму записи, особенно когда нужно указать начальное значение, условие и шаг итерации. Цикл for состоит из трех
частей, разделенных точкой с запятой:
Инициализация: Здесь задается начальное значение переменной, обычно используется для счетчика.
Условие: Здесь указывается условие, при котором цикл будет выполняться. Если условие истинно, то цикл продолжается;
если ложно, то цикл прекращается.
Итерация: Здесь задается шаг, на который будет изменяться переменная после каждой итерации.

В приведенном примере цикл for будет выполняться, начиная с j=0, пока j меньше 5. На каждой итерации значение
переменной j выводится в консоль, а затем увеличивается на 1.
*/

for (let j = 0; j < 5; j++) {
    console.log(j);
}


/*
Цикл do...while похож на цикл while, но он проверяет условие после выполнения блока кода. Это означает, что блок
кода будет выполнен хотя бы один раз, даже если условие с самого начала является ложным. После выполнения блока кода
проверяется условие, и если оно истинно, цикл повторяется. Цикл do...while продолжает выполняться до тех пор,
пока условие остается истинным

В приведенном примере цикл do...while будет выполняться, пока переменная k меньше 5. Сначала значение переменной
k выводится в консоль, а затем увеличивается на 1. Затем проверяется условие, и если оно истинно, цикл повторяется.
*/

let k = 0;
do {
    console.log(k);
    k++;
} while (k < 5);


/*
Конструкция switch ... case
Используется если есть несколько заранее известных вариантов значений, вместо многократной
вложенности конструкций else if
*/
let age = 35;

switch (age) {
    case age < 10:
        console.log("<10");
        break;

    case age < 20:
        console.log("<20");
        break;

    case age < 30:
        console.log("<30");
        break;

    case age < 40:
        console.log("<40");
        break;

    case age < 50:
        console.log("<50");
        break;

    default:
        console.log(" > 50");
}






















