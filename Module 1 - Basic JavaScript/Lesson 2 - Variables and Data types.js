/*
Переменные и типы данных в JavaScript
*/


/*
Что такое переменная
Переменная - это контейнер или ячейка памяти, которая используется для хранения и обращения к данным в программировании. Она может содержать различные типы данных, такие как числа, строки, булевы значения и другие
Можно представить переменную как коробку или ярлык, на котором написано имя, и внутри которой хранится какое-то значение. Это значение может быть изменено или прочитано в процессе выполнения программы.
*/




//=====================================================================//




/*
Объявление переменных
Переменные в JavaScript объявляются с использованием ключевых слов var, let или const
*/

var age;  // Объявление переменной 'age' с использованием 'var'
let name; // Объявление переменной 'name' с использованием 'let'
const PI = 3.14; // Объявление константы 'PI' с использованием 'const'




/*
Присваивание значений переменным
Переменным можно присваивать значения разных типов данных, таких как числа, строки, булевы значения, символы и тд
*/

age = 25; // присвоение числового значения переменной age
name = "John"; // Присвоение строки переменной name
let isStudent = true; // присвоение булевого значения переменной isStudent
let symbol = Symbol("unique"); // присвоение символа переменной symbol




//=====================================================================//




/*
Типы данных
JavaScript имеет несколько встроенных типов данных
*/
/*Числа:*/    let count = 10;
/*Строки:*/    let name1 = "John";
/*Булевы значения:*/    let isStudent1 = true;
/*Массивы:*/   let numbers = [1, 2, 3, 4, 5];
/*Объекты:*/    let person = { name: "John", age: 25 };
/*Null:*/     let data = null;
/*Undefined:*/     let value;
/*Символы:*/     let symbol1 = Symbol("unique");




//=====================================================================//




/*
Числа
Арифметические операции: JavaScript поддерживает основные арифметические операции, такие как сложение (+)
вычитание (-), умножение (*), деление (/) и остаток от деления (%), возведение в степень (**)
*/

let x = 5;
let y = 2;

console.log(x + y);
console.log(x - y);
console.log(x * y);
console.log(x / y);
console.log(x % y);
console.log(x ** y);




/*
Округление чисел
В JavaScript есть несколько методов для округления чисел. Например, Math.round() округляет число до ближайшего
целого значения, Math.floor() округляет число вниз до ближайшего меньшего целого, а Math.ceil() округляет
число вверх до ближайшего большего целого
*/

let a = 3.7;
console.log(Math.round(a)); // 4
console.log(Math.floor(a)); // 3
console.log(Math.ceil(a)); // 4




/*
Генерация случайных чисел: Метод Math.random() используется для генерации псевдослучайных чисел в диапазоне от 0 до 1.
*/

let randomNumber = Math.random();
console.log(randomNumber);




/*
Проверка на число: Для проверки, является ли значение числом, можно использовать функцию isNaN()
которая возвращает true, если значение не является числом, и false, если оно числовое
*/

console.log(isNaN(5)); // false
console.log(isNaN("Hello")); // true




/*
Преобразование строки в число
Метод parseInt(): Метод parseInt() используется для преобразования строки в целое число. Он анализирует строку
до тех пор, пока не встретит невалидный символ или конец строки. С помощью него ещё можно переводить числа
из других систем счисления

Метод Number(): Метод Number() может быть использован для преобразования строки в число, как целое
так и с плавающей точкой
*/

let strNum = "1010";
let num = parseInt(strNum, 2); // преобразование двоичного числа в десятичное
console.log(num); // 10

let num1 = Number(strNum);
console.log(num1); // 1010








//=====================================================================//






/*
Строки
*/


/*
Конкатенация строк: Используя оператор "+" или метод concat(), можно объединять (конкатенировать)
две или более строк в одну.
*/

let str1 = "Hello";
let str2 = "World";

let resultPlus = str1 + " " + str2; // Hello World
let resultConcat = str1.concat(" ", str2); // Hello World


/*
Длина строки: С помощью свойства length можно получить количество символов в строке.
*/
str1.length; // 5



/*
Извлечение символов: Можно получать отдельные символы из строки, используя оператор индексации [].
*/
console.log(str1[0]); // "H"
console.log(str1[4]); // "o"


/*
Сравнение строк: Можно сравнивать строки, используя операторы сравнения (==, ===, <, >, <=, >=).
*/
console.log(str1 > str2); // false
console.log(str1 === "Hello"); // true



/*
Поиск подстроки: Метод indexOf() позволяет найти позицию первого вхождения подстроки в строку
Если подстрока не найдена, возвращается значение -1.
*/

console.log(str1.indexOf("llo")); // 2
console.log(str1.indexOf("qwert")); // -1 подстрока не найдена


/*
Извлечение подстроки: Метод substring() позволяет извлечь часть строки, указав начальную и конечную позиции.
*/

let someStr = "Hello, World";
console.log(someStr.substring(0, 5)); // "Hello"
console.log(someStr.substring(7)); // "World"


/*
Замена символов: Метод replace() позволяет заменить все вхождения указанного символа или подстроки на новое значение.
*/
console.log(someStr.replace("World", "Alice")); // "Hello Alice"
console.log(someStr.replace("o", "e")); // "Helle, World"



/*
Преобразование регистра: Методы toLowerCase() и toUpperCase() позволяют преобразовать строку к нижнему
или верхнему регистру соответственно.
*/
console.log(someStr.toLowerCase()); // "hello, world"
console.log(someStr.toUpperCase()); // "HELLO, WORLD"



/*
Разделение строки на массив: Метод split() позволяет разделить строку на массив подстрок по заданному разделителю.
*/
let strArr = someStr.split(", ");
console.log(strArr); // ["Hello", "World"]


/*
В сроки можно включать переменные
С помощью конкатенации
*/

let userName = "John";
let someStr = "Hello " + userName + "!"

/*
И с помощью обратных кавычек
В этом случае, всё что заключено в обратные кавычки, будет интерпретироваться как строка, а содержимое переменных
можно вставлять через конструкцию ${переменная}
*/

let someStrWithVariable = `Hello ${userName}!`








//=====================================================================//





// Symbol

/*
Symbol - это новый тип данных, добавленный в ECMAScript 6. Символы представляют собой уникальные и
неизменяемые значения, которые могут быть использованы в качестве идентификаторов для свойств объектов.
*/

let newSymbol = Symbol("unique");  // Создание символа с описанием "unique"
let obj = {
    [symbol]: "value" // использование символа в качестве свойства объекта
};

console.log(obj[symbol]); // Выведет "value"







//=====================================================================//






/*
Определение типа данных.
Чтобы узнать тип данных переменной, можно использовать оператор typeof.
*/
console.log(typeof 10); // number
console.log(typeof "John"); // string
console.log(typeof true); // boolean
console.log(typeof [1,2,3]); // object
console.log(typeof { name: "John", age: 10 }); // object
console.log(typeof null); // object (это баг в JS, на самом деле это примитив)
console.log(typeof undefined); // undefined
console.log(typeof Symbol("unique")); // symbol



/*
Преобразование типов данных
JavaScript автоматически преобразует типы данных во время выполнения.
Например, числа могут быть преобразованы в строки и наоборот.
*/

let number = 10;
let str = "20";

let result = num + str; // 1020
result = Number(str) + 5; // 25





